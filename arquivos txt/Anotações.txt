Tempo restante:
13/06 ()dias
Estratégia
-> máx de cada etapa
-> Entendimento completo e global do trabalho(visao macro)
-> delegação de tarefas a ser compridas + colaboração
-> trabalho genérico(n baseado no documento a ser lido)
-> fazer registros e obs ao longo do trabalho facilitar a documentação
obs:
-> *github*(Filipe) + git no vsc
-> terminal(makefile)
Planejamento/etapas/datas
-> ler documentos(1)
-> estrutura de daods coordenadas documentos(6)
-> cosine ranking(6)
-> testes de unidade(8) taxa de cobertura > 0,75
-> documentação(9) 10p. max, PDF + cf vai github(link pelo moodle), introdução, implementação, conclusão

Andamento:
-> leitura arquivos/ranking por meio de vector(numero de documentos varia)
ler palvra e acessar string usando iterator
-> 

Dúvidas:
->
->
->
Sobre:
recuperação de informação(information retrieval)
consulta(query)->palavras-chave
fluxograma(funcao de busca intercepta dados e interface)
modelo vetorial, componentes(documentos e consultas palavras chave), dimensões = palavras
data set
eficiência robótica-> 
. índice invertido para a base de dados(armazena documentos que a conten)
funçao de busca->
. determinacao coordenadas
. tf(term frequency)quantidade x que a a palvra aparece no documento-> ele é normalizado, dividido pela max freq de uma palavra no documento
. idf(inverse document frequency) importancia da palavra na coleção
. consine ranking(similaridade termo e documento)
. Q não pode ser bigrama/trigama(significado agregado)-> seria mais complexo o ranking
. função hash perfeita? associada ao mapa de coordenadas

* (1) leitura(funcoes)PEDRO
-> conversao caracteres especiais/Maiúscula
-> map alterar/inserir indice invertido
-> ciriar map com a palavra e o tf(objeto classe documento) map tf

* (2) implementação classe documento e funcões
-> calculo idf(saber numero de documentos total usando size) idf nomralizado->dividido pelo tfmax
-> w 


* Tarefas
. dar um push das alterações no github
. vsc portugues 
. 


